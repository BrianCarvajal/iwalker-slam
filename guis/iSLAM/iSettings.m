classdef iSettings < handle
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        values
    end
    
    properties (Access = public) % Public for debug
        fig
        controls
        isVirgin
    end
    
    
    
    methods
        function gui = iSettings(path)
            if nargin == 0
                gui.default();
            else
                gui.load(path)
            end  
        end
        
        function default(this)
            s.GridMap_Enabled = false;
            s.GridMap_ByteMode = false;
            s.GridMap_Plfree = 0.75;
            s.GridMap_Resolution = 0.2;
            s.GridMap_LimitsAuto = true;
            s.GridMap_LimitsMinX = -5;
            s.GridMap_LimitsMaxX = 5;
            s.GridMap_LimitsMinY = -5;
            s.GridMap_LimitsMaxY = 5;
            
            s.Rob_x0 = 0;
            s.Rob_y0 = 0;
            s.Rob_th0 = 90;
            s.Rob_dt = 0.1;
            
            s.Lidar_x = 0;
            s.Lidar_y = 0;
            s.Lidar_th = 0;
            s.Lidar_RangeMin = 0.2;
            s.Lidar_RangeMax = 5;
            s.Lidar_Horizon = 6;
            s.Lidar_DeadAngle = 85;
            
            s.LandmarkExtractor_ClusterSplitDist = 0.30;
            s.LandmarkExtractor_LineSplitDist = 0.15;
            s.LandmarkExtractor_MaxOutliers = 3;
            
            s.EKF_Vd = 0.01;
            s.EKF_Vth = 0.001;
            s.EKF_P0x = 0.001;
            s.EKF_P0y = 0.001;
            s.EKF_P0th = 0.001;
            
            s.Plots_fps = 0.1;
            
            s.MapPlot_drawRobot = true;
            s.MapPlot_drawRobotTrace = true;
            s.MapPlot_drawScanArea = true;
            
            s.RadarPlot_drawPoints = true;
            s.RadarPlot_drawRays = true;
            s.RadarPlot_drawValid = true;
            
            s.Adquisition_walker = 'iWalkerHokuyo';
            s.Adquisition_COM = 'COM1';
            s.Adquisition_SampleTimeCAN = 0.1;
            s.Adquisition_SampleTimeLidar = 0.5;
            s.Adquisition_EnableReactiveControl = false;
            s.Adquisition_LeftLambda = 0;
            s.Adquisition_RightLambda = 0;
            s.Adquisition_LeftNu = 0;
            s.Adquisition_RightNu = 0;
            s.Adquisition_SavePath = cd;
            s.Adquisition_count = 0;
            
            s.Log_path = cd;
            
            this.values = s;
        end
        
        function load(this, path)
            try
                this.values = load(path);
            catch
                disp('Error loading settings. Using default settings.');
                this.default();
            end
        end
        
        function save(this, path)
            try
                s = this.values;
                save(path, '-struct', 's');
            catch
                disp('Error saving settigs.');
            end
        end
        
        function show(this)
            % Create the figure
            f = figure(...
                'name', 'Settings', ...
                'NumberTitle', 'off', ...
                'DockControls', 'off', ...
                'toolbar', 'none', ...
                'MenuBar', 'none', ...
                'WindowStyle','modal');
            
            try
                % get the java window
                warning('off','MATLAB:HandleGraphics:ObsoletedProperty:JavaFrame');
                javaFrame = get(f,'JavaFrame');
                % set a cool custom window icon
                iconpath = [parentpath(parentpath(mfilename('fullpath'))) filesep 'icons' filesep 'gear.png'];
                javaFrame.setFigureIcon(javax.swing.ImageIcon(iconpath));
            catch
                disp('javaFrame not available');
            end
            
            s = this.values;
            
            ports = cell(1,20);
            for i = 1:20
               ports{i} = ['COM' num2str(i-1)]; 
            end
            
            % Search available serials ports for LIDAR
%             info = instrhwinfo('serial');
%             ports = info.AvailableSerialPorts;
%             if isempty(ports)
%                 ports = {'-'};
%             end

            
            properties = [ ...
                PropertyGridField('GridMap_Enabled', s.GridMap_Enabled, ...
                'Category', 'GridMap', ...
                'DisplayName', 'Enabled', ...
                'Description', '...') ...
                PropertyGridField('GridMap_ByteMode', s.GridMap_ByteMode, ...
                'Category', 'GridMap', ...
                'DisplayName', 'Byte Mode', ...
                'Description', '...') ...
                PropertyGridField('GridMap_Plfree', s.GridMap_Plfree, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.0 1.0]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'P(beam|free)', ...
                'Description', '...') ...
                PropertyGridField('GridMap_Resolution', s.GridMap_Resolution, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.01 Inf]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'Resolution', ...
                'Description', '...') ...
                PropertyGridField('GridMap_LimitsAuto', s.GridMap_LimitsAuto, ...
                'Category', 'GridMap', ...
                'DisplayName', 'Auto Size', ...
                'Description', '...') ...
                PropertyGridField('GridMap_LimitsMinX', s.GridMap_LimitsMinX, ...
                'Type', PropertyType('denserealdouble', 'scalar', [-Inf -5]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'Min X Limit', ...
                'Description', '...') ...
                PropertyGridField('GridMap_LimitsMaxX', s.GridMap_LimitsMaxX, ...
                'Type', PropertyType('denserealdouble', 'scalar', [5 Inf]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'Max X Limit', ...
                'Description', '...') ...
                PropertyGridField('GridMap_LimitsMinY', s.GridMap_LimitsMinY, ...
                'Type', PropertyType('denserealdouble', 'scalar', [-Inf -5]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'Min Y Limit', ...
                'Description', '...') ...
                PropertyGridField('GridMap_LimitsMaxY', s.GridMap_LimitsMaxY, ...
                'Type', PropertyType('denserealdouble', 'scalar', [5 Inf]), ...
                'Category', 'GridMap', ...
                'DisplayName', 'Max Y Limit', ...
                'Description', '...') ...
                PropertyGridField('Rob_x0', s.Rob_x0, ...
                'Category', 'Robot', ...
                'DisplayName', 'x0', ...
                'Description', '...') ...
                PropertyGridField('Rob_y0', s.Rob_y0, ...
                'Category', 'Robot', ...
                'DisplayName', 'y0', ...
                'Description', '...') ...
                PropertyGridField('Rob_th0', s.Rob_th0, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 360]), ...
                'Category', 'Robot', ...
                'DisplayName', 'theta0', ...
                'Description', '...') ...
                PropertyGridField('Rob_dt', s.Rob_dt, ...
                'Category', 'Robot', ...
                'DisplayName', 'dt', ...
                'Description', '...', ...
                'ReadOnly', true) ...
                PropertyGridField('EKF_Vd', s.EKF_Vd, ...
                'Category', 'EKF', ...
                'DisplayName', 'Vd', ...
                'Description', '...') ...
                PropertyGridField('EKF_Vth', s.EKF_Vth, ...
                'Category', 'EKF', ...
                'DisplayName', 'Vth', ...
                'Description', '...') ...
                PropertyGridField('EKF_P0x', s.EKF_P0x, ...
                'Category', 'EKF', ...
                'DisplayName', 'P0x', ...
                'Description', '...') ...
                PropertyGridField('EKF_P0y', s.EKF_P0y, ...
                'Category', 'EKF', ...
                'DisplayName', 'P0y', ...
                'Description', '...') ...
                PropertyGridField('EKF_P0th', s.EKF_P0th, ...
                'Category', 'EKF', ...
                'DisplayName', 'P0th', ...
                'Description', '...') ...
                PropertyGridField('Lidar_x', s.Lidar_x, ...
                'Category', 'Lidar', ...
                'DisplayName', 'x', ...
                'Description', '...') ...
                PropertyGridField('Lidar_y', s.Lidar_y, ...
                'Category', 'Lidar', ...
                'DisplayName', 'y', ...
                'Description', '...') ...
                PropertyGridField('Lidar_th', s.Lidar_th, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 360]), ...
                'Category', 'Lidar', ...
                'DisplayName', 'theta', ...
                'Description', '...') ...
                PropertyGridField('Lidar_RangeMin', s.Lidar_RangeMin, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 Inf]), ...
                'Category', 'Lidar', ...
                'DisplayName', 'Min Range', ...
                'Description', '...') ...
                PropertyGridField('Lidar_RangeMax', s.Lidar_RangeMax, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 Inf]), ...
                'Category', 'Lidar', ...
                'DisplayName', 'Max Range', ...
                'Description', '...') ...
                PropertyGridField('Lidar_Horizon', s.Lidar_Horizon, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 Inf]), ...
                'Category', 'Lidar', ...
                'DisplayName', 'Horizon', ...
                'Description', '...') ...
                PropertyGridField('Lidar_DeadAngle', s.Lidar_DeadAngle, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0 180]), ...
                'Category', 'Lidar', ...
                'DisplayName', 'Dead angle', ...
                'Description', '...') ...
                PropertyGridField('LandmarkExtractor_ClusterSplitDist', s.LandmarkExtractor_ClusterSplitDist, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.05 Inf]), ...
                'Category', 'Landmark Extraction', ...
                'DisplayName', 'Cluster Split Distance', ...
                'Description', '...') ...
                PropertyGridField('LandmarkExtractor_LineSplitDist', s.LandmarkExtractor_LineSplitDist, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.05 Inf]), ...
                'Category', 'Landmark Extraction', ...
                'DisplayName', 'Line Split Distance', ...
                'Description', '...') ...
                PropertyGridField('LandmarkExtractor_MaxOutliers', int32(s.LandmarkExtractor_MaxOutliers), ...
                'Type', PropertyType('int32', 'scalar', [1 Inf]), ...
                'Category', 'Landmark Extraction', ...
                'DisplayName', 'Max Outliers', ...
                'Description', '...') ...
                PropertyGridField('Plots_fps', s.Plots_fps, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.01 1]), ...
                'Category', 'Plot', ...
                'DisplayName', 'fps', ...
                'Description', '...') ...
                PropertyGridField('MapPlot_drawRobot', s.MapPlot_drawRobot, ...
                'Category', 'Map Plot', ...
                'DisplayName', 'Draw robot', ...
                'Description', '...') ...
                PropertyGridField('MapPlot_drawRobotTrace', s.MapPlot_drawRobotTrace, ...
                'Category', 'Map Plot', ...
                'DisplayName', 'Draw robot trace', ...
                'Description', '...') ...
                PropertyGridField('MapPlot_drawScanArea', s.MapPlot_drawScanArea, ...
                'Category', 'Map Plot', ...
                'DisplayName', 'Draw scanned area', ...
                'Description', '...') ...     
                PropertyGridField('RadarPlot_drawPoints', s.RadarPlot_drawPoints, ...
                'Category', 'Radar Plot', ...
                'DisplayName', 'Draw points', ...
                'Description', '...') ... 
                PropertyGridField('RadarPlot_drawRays', s.RadarPlot_drawRays, ...
                'Category', 'Radar Plot', ...
                'DisplayName', 'Draw rays', ...
                'Description', '...') ... 
                PropertyGridField('RadarPlot_drawValid', s.RadarPlot_drawValid, ...
                'Category', 'Radar Plot', ...
                'DisplayName', 'Draw valid data', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_walker', s.Adquisition_walker, ...
                'Type', PropertyType('char', 'row',  {'iWalkerRoboPeak' 'iWalkerHokuyo'} ), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'iWalker', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_COM', s.Adquisition_COM, ...
                'Type', PropertyType('char', 'row',  ports), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'COM', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_SampleTimeCAN', s.Adquisition_SampleTimeCAN, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.01 Inf]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'CAN Sample Time', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_SampleTimeLidar', s.Adquisition_SampleTimeLidar, ...
                'Type', PropertyType('denserealdouble', 'scalar', [0.01 Inf]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Lidar Sample Time', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_EnableReactiveControl', s.Adquisition_EnableReactiveControl, ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Enable Reactive Control', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_LeftLambda', int32(s.Adquisition_LeftLambda), ...
                'Type', PropertyType('int32', 'scalar', [0 100]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Left Lambda', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_RightLambda', int32(s.Adquisition_RightLambda), ...
                'Type', PropertyType('int32', 'scalar', [0 100]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Right Lambda', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_LeftNu', int32(s.Adquisition_LeftNu), ...
                'Type', PropertyType('int32', 'scalar', [0 100]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Left Nu', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_RightNu', int32(s.Adquisition_RightNu), ...
                'Type', PropertyType('int32', 'scalar', [0 100]), ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Right Nu', ...
                'Description', '...') ...
                PropertyGridField('Adquisition_count', s.Adquisition_count, ...
                'Category', 'Adquisition', ...
                'DisplayName', 'Captures', ...
                'Description', '...', ...
                'ReadOnly', true) ...
                PropertyGridField('Adquisition_SavePath', s.Adquisition_SavePath, ...
                'Category', 'Log', ...
                'DisplayName', 'Datalog save path', ...
                'Description', '...', ...
                'ReadOnly', true) ...) ...
                PropertyGridField('Log_path', s.Log_path, ...
                'Category', 'Log', ...
                'DisplayName', 'Datalog load path', ...
                'Description', '...', ...
                'ReadOnly', true) ...) ...
                ];
            
            % arrange flat list into a hierarchy based on qualified names
            properties = properties.GetHierarchy();
            
            % procedural usage
            g = PropertyGrid(f, ...            % add property pane to figure
                'Properties', properties, ...  % set properties explicitly
                'Position', [0 0 1 1]);
                       
            uiwait();
            this.values = g.GetPropertyValues();
        end        
    end
    
    
    
end

